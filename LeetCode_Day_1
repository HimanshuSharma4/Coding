### Leetcode Day 1

Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
Example 2:

Input: arr = [1,1]
Output: 1
 

Constraints:

1 <= arr.length <= 10^4
0 <= arr[i] <= 10^5


### SOLUTION: Python:

class Solution(object):
    def findSpecialInteger(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        n = len(arr)
        threshold = n // 4

        if n == 1:
            return arr[0]

        for i in range(n - 1):
            if arr[i] == arr[i + 1]:
                run_length = 2
                while i + run_length < n and arr[i] == arr[i + run_length]:
                    run_length += 1

                if run_length > threshold:
                    return arr[i]

        return 0



### Time and Space Complexity:

### Time Complexity:
The time complexity of the solution is O(n), where n is the length of the input list `arr`. This is because the algorithm iterates through the list once, and the loop runs in linear time.

### Space Complexity:
The space complexity is O(1) because the algorithm uses a constant amount of extra space that does not depend on the size of the input list. The only additional variables used are `n`, `threshold`, `i`, `run_length`, and they all use a constant amount of space regardless of the size of the input.

In summary, the solution has a linear time complexity of O(n) and constant space complexity of O(1).
